repeat:
    Below is the code I used to impliment the repeat command.  This function is very similar
    to the replay function, with the difference being that each function call is wrapped in a
    for loop to repeat it the correct number of times.
        
        
        int repeat(char*args[], vector<string>& hist){
            //variables
            int i = 0;
            char* argv[10];
            //pull out command to be repeated
            while(args[i] != NULL){
                argv[i-2] = args[i];
            }
            //run command the specified number of times
            if(strcmp(argv[0], "history") == 0){
                for(int j = 0; j < atoi(args[1]); j++){
                    history(hist);
                }    
            }else if(strcmp(argv[0], "start") == 0){
                for(int j = 0; j < atoi(args[1]); j++){
                    start(argv);
                }
            }else if(strcmp(argv[0], "background") == 0){
                for(int j = 0; j < atoi(args[1]); j++){
                    background(argv);
                }
            }else if(strcmp(argv[0], "terminate") == 0){
                for(int j = 0; j < atoi(args[1]); j++){
                    terminate(argv);
                }
            }else if(strcmp(argv[0], "terminateall") == 0){
                for(int j = 0; j < atoi(args[1]); j++){
                    terminateall();
                }
            }
            return 0;
        }

terminatall:

    below is the code I used to impliment the terminateall command.  This function loops
    through a global vector holding all the background processes' pids and terminates all 
    of them, then clears the vector.

        int terminateall(){
        //terminate all pids in child vector
        for(int i = 0; i < children.size();i++){
           kill(children[i], SIGKILL);
        }
        //clear bc all pids terminated
        children.clear();
        return 0;
}